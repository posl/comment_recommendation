问题陈述
有一棵完美的二叉树，有2^{10^{100}}-1个顶点，编号为1，2，...，2^{10^{100}}-1。
顶点1是根。对于每个1≦i < 2^{10^{100}-1}，顶点i有两个孩子：顶点2i在左边，顶点2i+1在右边。
高桥从顶点X开始，执行N次移动，用一个字符串S表示，第i次移动如下。
如果S的第i个字符是U，就去他现在所在顶点的父方。
如果S的第i个字符是L，就去他现在所在的顶点的左边的子节点。
如果S的第i个字符是R，则转到他现在所在的顶点的右子。
找出高桥在N次移动后将在哪个顶点上的索引。在给定的情况下，可以保证答案最多为10^{18}。

限制条件
1 ≦ N ≦ 10^6
1 ≦ X ≦ 10^{18}
N和X是整数。
S的长度为N，由U、L和R组成。
当高桥在根部时，他从未试图去找父部。
当高桥在叶子上时，他从来没有试图去找一个子。
高桥在N次移动后所处顶点的索引最多为10^{18}。

输入
输入是由标准输入给出的，格式如下：
N X
S

输出
打印答案。

输入样本 1
3 2
网址

样本输出1
6
完美的二进制树有如下结构。
在这三步棋中，高桥走2->1->3->6。

输入样本 2
4 500000000000000000
RRUUU

样品输出2
500000000000000000
在这个过程中，高桥可能在一个索引超过10^{18}的顶点。

输入样本3
30 123456789
lrulurlurlululrlrrruurru

样本输出3
126419752371
