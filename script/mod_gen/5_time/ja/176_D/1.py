def main():
    h, w = map(int, input().split())
    c_h, c_w = map(int, input().split())
    d_h, d_w = map(int, input().split())
    s = []
    for i in range(h):
        s.append(input())
    c_h -= 1
    c_w -= 1
    d_h -= 1
    d_w -= 1
    # print(h, w, c_h, c_w, d_h, d_w, s)
    # ワープ魔法を使う最小回数を出力せよ。(D_h,D_w) に到達不可能な場合、かわりに -1 と出力せよ。
    # 考え方：ワープ魔法を使う回数を増やすことを考える
    #        ワープ魔法を使う回数を増やすことによって、目的地にたどり着ける場合と、たどり着けない場合がある
    #        たどり着ける場合は、ワープ魔法を使う回数を増やすことを考える
    #        たどり着けない場合は、ワープ魔法を使う回数を減らすことを考える
    #        このようにして、最小のワープ魔法を使う回数を求める
    #        たどり着けない場合は、-1を出力する
    #        たどり着ける場合は、ワープ魔法を使う回数を増やすことを考える
    #        たどり着けない場合は、ワープ魔法を使う回数を減らすことを考える
    #        このようにして、最小のワープ魔法を使う回数を求める
    #        た

if __name__ == '__main__':
    main()