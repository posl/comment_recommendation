def solve():
    # 二次元平面上の点の集合 S={(a_1,b_1),(a_2,b_2),...,(a_N,b_N)} と T={(c_1,d_1),(c_2,d_2),...,(c_N,d_N)}
    # S に対して以下の操作を 0 回以上任意の順に好きなだけ繰り返すことで、S と T を一致させられるかを判定してください。
    # 実数 p (0 < p < 360) を定め、 S に含まれる全ての点を、原点を中心に時計回りに p 度回転させる。
    # 実数 q,r を定める。S に含まれる全ての点を、x 軸方向に q, y 軸方向に r 移動させる。q, r の値域に制約はなく、特に正/負/零のいずれになってもよい。
    # 1 ≦ N ≦ 100
    # -10 ≦ a_i,b_i,c_i,d_i ≦ 10
    # i ≠ j なら (a_i,b_i) ≠ (a_j,b_j)
    # i ≠ j なら (c_i,d_i) ≠ (c_j,d_j)
    # 入力は全て整数
    # N
    # a_1 b_1
    # a_2 b_2
    # .
    # .
    # .
    # a_N b_N
    # c_1 d_1
    # c_2 d_2
    # .
    # .
    # .
    # c_N d_N
    # S に含まれる点を赤で、T に含まれる点を緑で塗った場合、与えられる点集合は以下の図の通りになります。
    # この場合、以下の手順によって S を T に一致させ

if __name__ == '__main__':
    solve()