def main():
    N, M = map(int, input().split())
    A = [0] * M
    B = [0] * M
    for i in range(M):
        A[i], B[i] = map(int, input().split())
        A[i] -= 1
        B[i] -= 1
    # 都是0的数组
    # 从城市1到城市N所需的最短时间
    # 由于城市1到城市N所需的最短时间是无限大，因此将其初始化为无限大。
    # 由于城市1到城市1所需的最短时间是0，因此将其初始化为0。
    INF = 10 ** 18
    dist = [INF] * N
    dist[0] = 0
    # 从城市1到城市N所需的最短时间的路径数
    # 由于城市1到城市1所需的最短时间的路径数是1，因此将其初始化为1。
    # 由于城市1到城市N所需的最短时间的路径数是0，因此将其初始化为0。
    mod = 10 ** 9 + 7
    count = [0] * N
    count[0] = 1
    # 从城市1到城市N所需的最短时间的路径数
    # 由于城市1到城市N所需的最短时间的路径数是0，因此将其初始化为0。
    prev = [-1] * N
    # 从城市1到城市N所需的最短时间的路径数
    # 由于城市1到城市N所需的最短时间的路径数是0，因此将其初始化为0。
    # 由于城市1到城市1所需的最短时间的路径数是1，因此将其初始化为1。
    # 队列
    Q = [0] * N
    head = 0
    tail = 0
    Q

if __name__ == '__main__':
    main()