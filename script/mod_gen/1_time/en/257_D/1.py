def main():
    N = int(input())
    trampolines = []
    for i in range(N):
        x, y, p = map(int, input().split())
        trampolines.append((x, y, p))
    # まずは、Takahashiが全てのトランポリンに行けるかどうかを判定する。
    # どのトランポリンからスタートしても、全てのトランポリンに行けるということは、
    # どのトランポリンからスタートしても、そのトランポリンに行けるトランポリンが存在するということ。
    # つまり、全てのトランポリンに行けるためには、全てのトランポリンに行けるトランポリンが存在する必要がある。
    # これは、全てのトランポリンに行けるトランポリンが存在するかを、全てのトランポリンの組み合わせに対して調べればよいことになる。
    # これは、全てのトランポリンの組み合わせに対して、
    # その２つのトランポリンが行けるかどうかを調べればよいことになる。
    # この計算量はO(N^2)となる。
    # しかし、この計算量は、N≦200という制約があるため、間に合う。
    # また、この計算量は、全てのトランポリンの組み合わせに対して、
    # その２つのトランポリンが行けるかどうかを調べるため、
    # トランポリンのパラメータが増えても、計算量は増えない。
    # つまり、トランポリンのパラメータが増えても、この

if __name__ == '__main__':
    main()