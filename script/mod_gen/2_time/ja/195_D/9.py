def solve(N, M, Q, W, V, X, Query):
    """
    N: 荷物の数
    M: 箱の数
    Q: クエリの数
    W: 荷物の重さ
    V: 荷物の価値
    X: 箱の大きさ
    Query: クエリ
    """
    # 箱の大きさの昇順にソート
    X.sort()
    # 荷物の価値の降順にソート
    # 価値の同じ荷物がある場合は重さの昇順にソート
    W_V = [(w, v) for w, v in zip(W, V)]
    W_V.sort(key=lambda x: (x[1], x[0]), reverse=True)
    # 答えを格納するリスト
    ans = []
    for l, r in Query:
        # 箱の大きさが l 番目から r 番目までの箱の中に入る荷物の価値の合計を求める
        # 箱の大きさの昇順にソートされているため、箱の大きさを二分探索で求める
        # 箱の大きさが X[i] 以下の荷物の価値の合計を求める
        # 価値の降順にソートされているため、価値の大きい荷物から順に箱に入れていく
        # 価値の大きい荷物から順に箱に入れていくため、二分探索を用いる
        # 二分探索の対象のリストは、箱の大きさが X[i] 以下の荷物の価値のリストとする
        # 二分探索の対象のリストの中の値は、箱の大きさが X[i]

if __name__ == '__main__':
    solve()