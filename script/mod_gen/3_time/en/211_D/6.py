def main():
    N, M = map(int, input().split())
    # 隣接リストを作る
    adj = [[] for _ in range(N)]
    for _ in range(M):
        A, B = map(int, input().split())
        A -= 1
        B -= 1
        adj[A].append(B)
        adj[B].append(A)
    # 各頂点について、1からの距離を計算する
    # 1からの距離が1の頂点は、1からの最短経路の数は1
    # 1からの距離が2の頂点は、1からの最短経路の数は1からの距離が1の頂点の数
    # 1からの距離が3の頂点は、1からの最短経路の数は1からの距離が1の頂点の数 + 1からの距離が2の頂点の数
    # というように、1からの距離がiの頂点は、1からの距離がi-1の頂点の数となる
    # このように、1からの距離がiの頂点は、1からの距離がi-1の頂点の数となることを利用する
    # 1からの距離がiの頂点の数を、dp[i]とすると、dp[i] = dp[i-1] + dp[i-2]となる
    # dp[0] = 1, dp[1] = 0とする
    # dp[N-1]が、1からNまでの最短経路の数となる
    dp = [0] * (N + 1)
    dp[0] = 1
    # 1から幅優先探索を行う
    # 1からの距離がiの頂点の数を、dp[i

if __name__ == '__main__':
    main()