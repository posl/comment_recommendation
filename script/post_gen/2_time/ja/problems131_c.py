Synthesizing 10/10 solutions

=======
Suggestion 1

def main():
    A, B, C, D = map(int, input().split())
    print(B - A + 1 - (B // C - (A - 1) // C) - (B // D - (A - 1) // D) + (B // (C * D // math.gcd(C, D)) - (A - 1) // (C * D // math.gcd(C, D))))

=======
Suggestion 2

def main():
    # A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数を求めてください。
    A, B, C, D = map(int, input().split())
    # A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数を求めてください。
    print(B - A + 1 - (B // C - (A - 1) // C) - (B // D - (A - 1) // D) + (B // lcm(C, D) - (A - 1) // lcm(C, D)))

=======
Suggestion 3

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

=======
Suggestion 4

def gcd(a, b):
    if a < b:
        a, b = b, a
    while b != 0:
        a, b = b, a%b
    return a

=======
Suggestion 5

def main():
    A,B,C,D = map(int,input().split())
    ans = B - A + 1
    ans -= B//C - (A-1)//C
    ans -= B//D - (A-1)//D
    ans += B//lcm(C,D) - (A-1)//lcm(C,D)
    print(ans)

=======
Suggestion 6

def main():
    A,B,C,D = map(int,input().split())

    # A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数を求めてください。
    # A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数を求めてください。
    # A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数を求めてください。
    # A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数を求めてください。
    # A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数を求めてください。
    # A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数を求めてください。
    # A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数を求めてください。
    # A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数を求めてください。
    # A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数を求めてください。
    # A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数を求めてください。
    # A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数を求めてください。
    # A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数

=======
Suggestion 7

def main():
    A,B,C,D=map(int,input().split())
    #print(A,B,C,D)
    #A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数を求めてください。
    #A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数を求めてください。
    #A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数を求めてください。
    #A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数を求めてください。
    #A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数を求めてください。
    #A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数を求めてください。
    #A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数を求めてください。
    #A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数を求めてください。
    #A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数を求めてください。
    #A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数を求めてください。
    #A 以上 B 以下の整数のうち、C でも D でも割り切れないものの個数を求めてください。
    #A 以上 B 以下の整数のうち、C でも D でも割り切れ

=======
Suggestion 8

def main():
    A,B,C,D = map(int,input().split())
    #A以上B以下の整数のうち、CでもDでも割り切れないものの個数を求める。
    #A以上B以下の整数のうち、CでもDでも割り切れるものの個数を求める。
    #A以上B以下の整数のうち、CでもDでも割り切れないものの個数は、A以上B以下の整数のうち、CでもDでも割り切れるものの個数を引けばよい。
    #A以上B以下の整数のうち、CでもDでも割り切れるものの個数は、A以上B以下の整数のうち、Cでも割り切れるものの個数と、A以上B以下の整数のうち、Dでも割り切れるものの個数を足したものから、A以上B以下の整数のうち、CとDの最小公倍数でも割り切れるものの個数を引けばよい。
    #A以上B以下の整数のうち、Cでも割り切れるものの個数は、B以下の整数のうち、Cでも割り切れるものの個数から、A未満の整数のうち、Cでも割り切れるものの個数を引けばよい。
    #B以下の整数のうち、Cでも割り切れるものの個数は、B/Cの切り上げを求めればよい。
    #A未満の整数のうち、Cでも割り切れるものの個数は、(A-1)/Cの切り上げを求めればよい。
    #A以上B以下の整数のうち、Dでも割り切れるものの個

=======
Suggestion 9

def main():
    A,B,C,D = map(int,input().split())
    #print(A,B,C,D)
    ans = B - A + 1
    ans -= B // C - (A - 1) // C
    ans -= B // D - (A - 1) // D
    ans += B // (C * D) - (A - 1) // (C * D)
    print(ans)

=======
Suggestion 10

def lcm(a,b):
    return a*b//gcd(a,b)
