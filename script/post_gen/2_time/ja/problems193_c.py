Synthesizing 10/10 solutions (Duplicates hidden)

=======
Suggestion 1

def main():
    N = int(input())
    ans = N-1
    for i in range(2, int(N**0.5)+1):
        j = 2
        while i**j <= N:
            ans -= 1
            j += 1
    print(ans)

=======
Suggestion 2

def main():
    n = int(input())
    ans = n - 1
    for i in range(2, n):
        for j in range(2, n):
            if i**j <= n:
                ans -= 1
            else:
                break
    print(ans)

=======
Suggestion 3

def main():
    N = int(input())
    ans = N - 1
    for i in range(2, N):
        if i*i > N:
            break
        j = 2
        while i**j <= N:
            ans -= 1
            j += 1
    print(ans)

=======
Suggestion 4

def main():
    N = int(input())
    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,

=======
Suggestion 5

def main():
    N = int(input())
    # 2^2,2^3,2^4,2^5,2^6,2^7,2^8,2^9,2^10,2^11,2^12,2^13,2^14,2^15,2^16,2^17,2^18,2^19,2^20,2^21,2^22,2^23,2^24,2^25,2^26,2^27,2^28,2^29,2^30,2^31,2^32,2^33,2^34,2^35,2^36,2^37,2^38,2^39,2^40,2^41,2^42,2^43,2^44,2^45,2^46,2^47,2^48,2^49,2^50,2^51,2^52,2^53,2^54,2^55,2^56,2^57,2^58,2^59,2^60,2^61,2^62,2^63,2^64,2^65,2^66,2^67,2^68,2^69,2^70,2^71,2^72,2^73,2^74,2^75,2^76,2^77,2^78,2^79,2^80,2^81,2^82,2^83,2^84,2^85,2^86,2^87,2^88,2^89,2^90,2^91,2^92,2^93,2^94,2^95,2^96,2^97,2^98,2^99,2^100,2^101,2^102,2^103,2^104,2^105,2^106,2^107,2^108,2^109,2^110,2^111,2^112,2^113,2^114,2^115,2^116,2^117,2^118,2^119,2^120,2^121,2^122,2^123,2

=======
Suggestion 6

def main():
    N = int(input())
    if N == 1:
        print(0)
        exit()
    #Nを素因数分解
    prime_factor = {}
    for i in range(2, int(N**0.5)+1):
        while N % i == 0:
            if i in prime_factor:
                prime_factor[i] += 1
            else:
                prime_factor[i] = 1
            N //= i
    if N != 1:
        if N in prime_factor:
            prime_factor[N] += 1
        else:
            prime_factor[N] = 1
    #print(prime_factor)
    #print(prime_factor)
    #素因数の数を求める
    prime_factor_num = 0
    for i in prime_factor:
        prime_factor_num += prime_factor[i]
    #print(prime_factor_num)
    #素因数の数を用いて約数の数を求める
    divisor_num = 1
    for i in prime_factor:
        divisor_num *= prime_factor[i]+1
    #print(divisor_num)
    #約数の数-1を出力
    print(divisor_num-1)

=======
Suggestion 7

def main():
    N = int(input())
    #N = 100000

=======
Suggestion 8

def main():
    N = int(input())
    # Nの平方根までの素数を求める
    # 素数pについて、p^2, p^3, ... はpで割り切れるので、
    # p^2以上の素数はpで割り切れないことがわかる
    # これを利用して、Nの平方根までの素数のリストを求める
    # これにより、N以下の整数がa^bと表せるかどうかを判定できる
    # a^bと表せる整数は、aが素数であることと、bが2以上の整数であること
    # したがって、N以下の整数がa^bと表せない整数は、aが素数であることと、bが1以下の整数であること
    # したがって、N以下の整数がa^bと表せない整数は、aがNの平方根以下の素数であることと、bが1以下の整数であること
    # したがって、N以下の整数がa^bと表せない整数は、aがNの平方根以下の素数であることと、bが1以下の整数であること
    # したがって、N以下の整数がa^bと表せない整数は、aがNの平方根以下の素数であることと、bが1以下の整数であること
    # したがって、N以下の整数がa^bと表せない整数は、aがNの平方根以下の素数であることと、bが1以下の整数であること
    # したがって、N以下の整数がa^bと表せない整数は、aがNの平方根以下の素
