def main():
    N, M = map(int, input().split())
    edges = [list(map(int, input().split())) for _ in range(M)]
    # print(N, M, edges)
    # 邻接表
    adj = [[] for _ in range(N)]
    for u, v in edges:
        adj[u-1].append(v-1)
        adj[v-1].append(u-1)
    # print(adj)
    # 1. 无向图G没有一条连接顶点u和顶点v的边
    # 2. 在图G中增加一条连接顶点u和顶点v的边，就形成了一个双线图
    # 3. 双线图是二分图
    # 4. 二分图中没有奇数环
    # 5. 二分图中最大独立集等于顶点数减去最大匹配数
    # 二分图检测
    # 1. 深度优先遍历
    # 2. 广度优先遍历
    # 3. 染色法
    # 4. 邻接矩阵
    # 5. 邻接表
    # 染色法
    # 1. 从任意一个顶点开始，将其染成红色
    # 2. 将与其相邻的顶点染成蓝色
    # 3. 将与蓝色顶点相邻的顶点染成红色
    # 4. 如果某个顶点的相邻顶点已经染成了同色，则不是二分图
    # 5. 如果所有顶点都染完了，则是二分图
    # 6. 时间复杂度O(V+E)
    # 7. 空间复杂度O(V)
    # 二分图中最大独立集等于顶点数减去最大匹配数
    #
