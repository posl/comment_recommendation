def main():
    N, X, Y = map(int, input().split())
    # 隣接リストを作成
    graph = [[] for _ in range(N + 1)]
    for _ in range(N - 1):
        u, v = map(int, input().split())
        graph[u].append(v)
        graph[v].append(u)
    # 頂点 X から頂点 Y への単純パスを求める
    # 単純パスとは、頂点列 v_1,v_2, ..., v_k であって、
    # v_1=X, v_k=Y かつ、1≦ i≦ k-1 に対して v_i と v_{i+1} が辺で結ばれているようなものを頂点 X から頂点 Y へのパス と呼びます。
    # さらに、v_1,v_2, ..., v_k がすべて異なるようなものを頂点 X から頂点 Y への 単純パス と呼びます。
    # 木 T 上の任意の相異なる 2 頂点 a,b について、a から b への単純パスがただ一つ存在することが証明できます。
    # 木 T の頂点 X から頂点 Y への単純パスを求めるには、以下の手順で求めます。
    # 1. 頂点 X から頂点 Y への距離を求める
    # 2. 頂点 Y から頂点 X への距離を求める
    # 3. 1. と 2. で求めた距離を比較する
    # 4. 1. と 2. で求めた距離が等しい場合、頂点 X
