def solve():
    N = int(input())
    A = list(map(int, input().split()))
    MOD = 998244353
    # 10 ** 5 位の 0 で初期化されたビット列を用意する
    bit = [0] * (10 ** 5)
    # 1 から N までの各 i について、A[i] のビットを立てる
    for i in range(N):
        bit[A[i]] = 1
    # 2 ** (N - 1) のビット列を用意する
    bit2 = [0] * (2 ** (N - 1))
    # 0 から 2 ** (N - 1) - 1 までの各 i について、
    # i を 2 進数表記にしたときの各桁のビットを bit2 に立てる
    for i in range(2 ** (N - 1)):
        for j in range(N - 1):
            if (i >> j) & 1:
                bit2[i] += 1
    # 各 K について、答えを求める
    for k in range(10):
        ans = 0
        for i in range(2 ** (N - 1)):
            # 操作の順番を bit2[i] によって決める
            # bit2[i] が奇数のとき、最後に G を行う
            # bit2[i] が偶数のとき、最後に F を行う
            # このとき、操作の順番は 2 ** (N - 1) 通り存在する
            # このうち、K が最後になるのは、
            #   (N - 1) 回目の操作で K が出現する場合
            # または、
            #   (N - 1) 回目の操作で K が出現しない場合で、
            #   その場合に限り、N 回目の操作
