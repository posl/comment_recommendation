def solve():
    #从最后一个字符开始，逐个字符计算
    #计算出以该字符结尾的字符串的方案数
    #然后累加到总方案数中
    #最后输出方案数
    #方案数的计算方式：如果当前字符为c，那么方案数等于以c之前的字符结尾的字符串的方案数
    #注意：每个字符的方案数都要取模
    s = input()
    #初始化方案数列表
    #s[0]表示以s[0]结尾的字符串的方案数
    #s[1]表示以s[1]结尾的字符串的方案数
    #...
    #s[n-1]表示以s[n-1]结尾的字符串的方案数
    #n为字符串的长度
    #方案数初始化为0
    n = len(s)
    s = list(s)
    for i in range(n):
        s[i] = 0
    #计算方案数
    #从第一个字符开始
    for i in range(n):
        #如果当前字符为c
        if s[i] == 'c':
            #那么方案数等于以c之前的字符结尾的字符串的方案数
            #注意：这里的方案数是指以c之前的字符结尾的字符串的方案数，而不是以当前字符结尾的字符串的方案数
            #方案数要取模
            s[i] = 1
            #从第一个字符开始，逐个字符计算
            for j in range(i):
                #如果当前字符为h
                if s[j] == 'h':
                    #那么方案数等于以h之前的字符结尾的字符串的方案数
                    #注意：这里的方案数是指以h之前的字符结尾的字符串的方案数，而不是以当前字符结尾的字符串的方案数
                    #方案数要取模
                    s[i] = (s[i] + s[j
